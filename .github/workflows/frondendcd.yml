name: Frontend Continuous Deployment

on:
  push:
    branches:
      - main  # Runs on merge to main
  workflow_dispatch:  # Allows manual runs

env:
  AWS_REGION: us-east-1
  ECR_REPOSITORY: frontend
  IMAGE_TAG: ${{ github.sha }}
  REACT_APP_MOVIE_API_URL: af1624b256904432a8a1804ecac5d165-147004239.us-east-1.elb.amazonaws.com

jobs:
  lint:
    name: Lint TypeScript Code
    runs-on: ubuntu-latest

    steps:
      - name: Checkout code
        uses: actions/checkout@v3

      - name: Set up Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '18'

      - name: Install dependencies
        run: |
          cd starter/frontend
          npm ci

      - name: Run ESLint
        run: |
          cd starter/frontend
          npm run lint

  test:
    name: Tests
    runs-on: ubuntu-latest

    steps:
      - name: Checkout code
        uses: actions/checkout@v3

      - name: Set up Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '18'

      - name: Install dependencies
        run: |
          cd starter/frontend
          npm ci

      - name: Run Tests
        run: |
          cd starter/frontend
          npm test

  build-and-deploy:
    name: Build Docker Image and Deploy to EKS
    runs-on: ubuntu-latest
    needs: 
      - lint
      - test

    steps:
      - name: Checkout Code
        uses: actions/checkout@v3

      - name: Configure AWS credentials 
        uses: aws-actions/configure-aws-credentials@v2
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-region: ${{ env.AWS_REGION }}
      
      # # Set up the specified version of Terraform
      # - name: Setup Terraform
      #   uses: hashicorp/setup-terraform@v2
      #   with:
      #     terraform_version: 1.3.9  
      
      # # Initialize your Terraform configuration
      # - name: Terraform Init
      #   run: |
      #     cd setup/terraform
      #     terraform init

      # # Validate your Terraform configuration
      # - name: Terraform Validate
      #   run: |
      #     cd setup/terraform
      #     terraform validate 

      # # Generate and display an execution plan
      # - name: Terraform Plan
      #   run: |
      #     cd setup/terraform
      #     terraform plan 

      # # Apply the changes required to reach the desired state of the configuration
      # - name: Terraform Apply
      #   run: |
      #     cd setup/terraform
      #     terraform apply -auto-approve

      # - name: Install jq
      #   run: sudo apt-get update && sudo apt-get install -y jq

      # - name: Get Terraform Outputs
      #   id: tf_outputs
      #   run: |
      #     terraform output -json > tf_outputs.json
      #     echo "FRONTEND_ECR=$(jq -r .frontend_ecr.value tf_outputs.json)" >> $GITHUB_ENV

      - name: Login to Amazon ECR
        id: login-ecr
        uses: aws-actions/amazon-ecr-login@v2

      - name: Build and tag Docker image  
        run: |
          docker build \
            --build-arg REACT_APP_MOVIE_API_URL=${{ env.REACT_APP_MOVIE_API_URL }} \
            -t ${{ steps.login-ecr.outputs.registry }}/${{ env.ECR_REPOSITORY }}:${{ env.IMAGE_TAG }} \
            ./starter/frontend

      - name: Push image to ECR
        run: |
          docker push ${{ steps.login-ecr.outputs.registry }}/${{ env.ECR_REPOSITORY }}:${{ env.IMAGE_TAG }}

    
      - name: Update K8s Deployment in EKS
        run: |
          aws eks update-kubeconfig --region ${{ env.AWS_REGION }} --name cluster
    

      - name: Set up Kustomize
        uses: syntaqx/setup-kustomize@v1

      - name: Edit and apply manifests to the cluster
        run: |
          cd starter/frontend/k8s
          kustomize edit set image ${{ env.ECR_REPOSITORY }}=${{ steps.login-ecr.outputs.registry }}/${{ env.ECR_REPOSITORY }}:${{ env.IMAGE_TAG }}
          kustomize build | kubectl apply -f -
        
      